// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=mock/repository/interfaces.mock.gen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	types "github.com/SawitProRecruitment/UserService/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockRepositoryInterface) CreateEstate(ctx context.Context, length, width int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, length, width)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstate(ctx, length, width any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstate), ctx, length, width)
}

// CreateTree mocks base method.
func (m *MockRepositoryInterface) CreateTree(ctx context.Context, estateID string, tree types.Tree) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, estateID, tree)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CreateTree(ctx, estateID, tree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateTree), ctx, estateID, tree)
}

// GetEstateByID mocks base method.
func (m *MockRepositoryInterface) GetEstateByID(ctx context.Context, id string) (types.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateByID", ctx, id)
	ret0, _ := ret[0].(types.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateByID indicates an expected call of GetEstateByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstateByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstateByID), ctx, id)
}

// GetTree mocks base method.
func (m *MockRepositoryInterface) GetTree(ctx context.Context, estateID string) ([]types.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree", ctx, estateID)
	ret0, _ := ret[0].([]types.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree.
func (mr *MockRepositoryInterfaceMockRecorder) GetTree(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTree), ctx, estateID)
}
